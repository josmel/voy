// Generated by CoffeeScript 1.6.3
(function() {
  (function($) {
    var body, browser, getBrowser, jqFile, jqFileUtils, uaMatch;
    getBrowser = function() {
      var a, b;
      a = uaMatch(navigator.userAgent);
      b = {};
      if (a.browser) {
        b[a.browser] = true;
        b.version = a.version;
      }
      if (b.chrome) {
        b.webkit = true;
      } else {
        if (b.webkit) {
          b.safari = true;
        }
      }
      return b;
    };
    uaMatch = function(b) {
      var a;
      b = b.toLowerCase();
      a = /(chrome)[ \/]([\w.]+)/.exec(b) || /(webkit)[ \/]([\w.]+)/.exec(b) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(b) || /(msie) ([\w.]+)/.exec(b) || b.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(b) || [];
      return {
        browser: a[1] || "",
        version: a[2] || "0"
      };
    };
    browser = getBrowser();
    body = $("body");
    jqFileUtils = {
      hash: function() {
        return Math.random().toString(36).substr(2);
      },
      valExt: function(ext, eReg) {
        return /^(jpg|gif|png|jpeg|bmp)$/gi.test($.trim(ext));
      },
      validSize: function(file, maxSize) {
        var sz;
        if (browser.msie) {
          return true;
        }
        sz = file[0].files[0].size;
        if (parseInt(sz) <= maxSize) {
          return true;
        } else {
          return false;
        }
      },
      messages: {
        "0": "No se cargo un archivo",
        "1": "El archivo a cargar no esta permitido",
        "2": "El archivo excede su peso"
      }
    };
    jqFile = (function() {
      function jqFile(options) {
        var opt;
        opt = {
          btnFile: ".btn-jqFile",
          html5: false,
          routeFile: "jqFile",
          routeHtml5: null,
          createFile: true,
          nameFile: "inputFile",
          methodForm: "POST",
          eReg: /^(jpg|gif|png|jpeg|bmp)$/gi,
          maxSize: 2097152,
          success: null,
          error: null,
          beforeCharge: null,
          afterCharge: null
        };
        this.settings = $.extend(opt, options);
        if (this.settings.routeHtml5 === null) {
          this.settings.routeHtml5 = this.settings.routeFile;
        }
        this.arquitect = {};
        this._init();
      }

      jqFile.prototype._init = function() {
        this._arquitect();
        return this._bindEvents();
      };

      jqFile.prototype._arquitect = function() {
        var idIframe, settings;
        settings = this.settings;
        this.arquitect.btnFile = $(settings.btnFile);
        idIframe = jqFileUtils.hash();
        this.arquitect.idIframe = idIframe;
        this.arquitect.iframe = $("<iframe />", {
          "name": idIframe,
          "id": idIframe,
          "src": "javascript:false;",
          "style": "display:none;"
        });
        body.append(this.arquitect.iframe);
        if (settings.createFile === true) {
          return this._createFile(idIframe);
        } else {
          this.arquitect.file = $("input[name='" + settings.nameFile + "']");
          this.arquitect.form = this.arquitect.file.parents("form");
          this.arquitect.form.attr("target", idIframe);
          return this.arquitect.form.attr("action", settings.routeFile);
        }
      };

      jqFile.prototype._bindEvents = function() {
        var arquitect, settings, validFile, _this;
        _this = this;
        settings = this.settings;
        arquitect = this.arquitect;
        validFile = null;
        arquitect.file.bind("change", function() {
          validFile = _this._validFile.call(this, settings);
          if (validFile) {
            settings.beforeCharge && settings.beforeCharge();
            return arquitect.form.hide().submit();
          }
        });
        return arquitect.iframe.bind("load", function() {
          var json, response;
          response = browser.msie && parseInt(browser.version.substr(0, 1)) <= 8 ? window.frames[arquitect.idIframe].document.body.innerHTML : arquitect.iframe[0].contentDocument.body.innerHTML;
          if (response !== "false") {
            json = (new Function("return " + response))();
            settings.afterCharge && settings.afterCharge();
            settings.success && settings.success(json);
            return arquitect.form.show();
          }
        });
      };

      jqFile.prototype._createFile = function(idIframe) {
        var file, optFile, settings;
        settings = this.settings;
        optFile = this._settingsFile();
        this.arquitect.form = $("<form />", {
          "action": settings.routeFile,
          "target": idIframe,
          "method": settings.methodForm,
          "enctype": "multipart/form-data"
        });
        this.arquitect.form.css(optFile.form);
        file = {
          "type": "file",
          "name": settings.nameFile
        };
        this.arquitect.file = $("<input />", file);
        this.arquitect.file.css(optFile.file);
        this.arquitect.form.append(this.arquitect.file);
        return body.append(this.arquitect.form);
      };

      jqFile.prototype._settingsFile = function(optFile) {
        var btnFile, cssFile, cssForm, dimentions, positions;
        btnFile = this.arquitect.btnFile;
        dimentions = {
          "width": btnFile.outerWidth(true),
          "height": btnFile.outerHeight(true)
        };
        positions = btnFile.offset();
        cssForm = {
          "position": "absolute",
          "overflow": "hidden",
          "-ms-filter": "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)",
          "filter": "alpha(opacity=0)",
          "opacity": 0,
          "z-index": "99"
        };
        cssFile = {
          "display": "block",
          "font-size": "999px",
          "cursor": "pointer"
        };
        cssForm = $.extend(cssForm, dimentions, positions);
        cssFile = $.extend(cssFile, dimentions);
        return {
          "form": cssForm,
          "file": cssFile
        };
      };

      jqFile.prototype._validFile = function(settings) {
        var eReg, ext, file, srcFile, valExt, valSize;
        file = $(this);
        srcFile = file.val();
        ext = "";
        eReg = settings.eReg;
        if (srcFile !== "") {
          srcFile = srcFile.split("\\");
          srcFile = srcFile[srcFile.length - 1];
          ext = srcFile.split(".");
          ext = ext[ext.length - 1];
          valExt = jqFileUtils.valExt(ext, eReg);
          valSize = jqFileUtils.validSize(file, settings.maxSize);
          if (valExt && valSize) {
            return true;
          } else {
            if (!valExt) {
              settings.error && settings.error(1, jqFileUtils.messages["1"]);
            } else {
              settings.error && settings.error(2, jqFileUtils.messages["2"]);
            }
            return false;
          }
        } else {
          settings.error && settings.error(0, jqFileUtils.messages["0"]);
          return false;
        }
      };

      return jqFile;

    })();
    $.extend({
      jqFile: function(json) {
        new jqFile(json);
      }
    });
  })(jQuery);

}).call(this);
